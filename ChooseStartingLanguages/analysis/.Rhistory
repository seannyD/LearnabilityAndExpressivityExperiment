scale_x_discrete(name="")+
scale_fill_grey(start = 0.55, end=0.8) +
theme(text = element_text(size=10)) +
ggtitle("Scores for full papers only")
p2Paper
```
Rank by student status in each conference.
```{r}
p <- ggplot(allData[complete.cases(allData),], aes(conference:student, Score.mean, fill=student))
p <- p + geom_violin() + geom_boxplot(width=0.1) +
theme(text=element_text(size=20), legend.position="none") +
scale_y_continuous(name="Score ranking")+
scale_x_discrete(name="")+
scale_fill_grey(start = 0.55, end=0.8)+
theme(text = element_text(size=10))
p
pdf("../results/Results_Student_3conf.pdf", width = 12, height= 6)
p
dev.off()
```
Combined student and gender:
```{r}
ggplot(allData, aes(y=Score.mean,x=paste(student,gender),colour=conference))+ geom_boxplot(varwidth = 0.5)
ggplot(allData, aes(y=Score.mean,x=paste(as.numeric(conference),gender),colour=student))+ geom_boxplot(varwidth = 0.5)
ggplot(allData, aes(y=Score.mean,x=paste(student,as.numeric(conference)),colour=gender))+ geom_boxplot(varwidth = 0.5)
```
\newpage
# Review ranks by gender and student status
Are papers with female first authors ranked higher than those with male first authors under double-blind review?
Using a simple anova, there's a significant interaction between gender and review type:
```{r}
summary(aov(Score.mean ~ FirstAuthorGender*student*review*format, data=allData))
```
However, it looks like this is driven just by EvoLang11:
```{r}
t.test.string = function(tx){
t = signif(tx$statistic,2)
df = tx$parameter['df']
p = signif(tx$p.value,3)
est = signif(diff(tx$estimate),2)
paste("(difference in means = ",est,", t = ",t,", p = ",p,")",sep = "")
}
for(conf in levels(allData$conference)){
print(conf)
print(t.test.string(t.test(Score.mean~FirstAuthorGender, data=allData[allData$conference==conf,])))
}
```
\newpage
Alternatively, we can use a mixed effects model, with random slopes for conference and test whether the interaction between gender and review type is a significant fixed predictor.  A random intercept is not necessary, because the data is scaled to be centered around 0 within each conference.  A random slope for the interaction between gender and review is also not permissable, since review type does not vary by conference.
```{r warning=F}
m0 = lmer(Score.mean~ 1 +
(0+FirstAuthorGender+student+format|| conference),
contrasts=list(
FirstAuthorGender=contr.sum(2)/2),
data = allData,
control = lmerControl(optimizer = "Nelder_Mead",
optCtrl = list(maxfun=100000)))
mFrm = update(m0,~.+format)
mStu = update(mFrm,~.+student)
mGen = update(mStu,~.+FirstAuthorGender)
mRev = update(mGen,~.+review)
mGxR = update(mRev,~.+FirstAuthorGender:review)
anova(m0,mFrm,mStu,mGen,mRev,mGxR)
summary(mGxR)
```
The results above suggest that there's no overall interaction between gender and review type.  The tendency is there, but from the plots it's probably just driven by EvoLang 11.
\newpage
## Permutation test
The distributions of score means are not very normal within conferences.  We run a permutation test to address this.  We calculate the average difference between single blind and double blind scores for males (dM) and for females (dF).  Then we calculate dF - dM. A value > 0 means females scores increase more than male scores under double blind review. This 'true difference' is compared to a 'permuted difference'.  The association between review scores and review type is randomly permuted, and dF - dM is calculated again.  This is done 10,000 times to compare the true difference to a distribution of random differences.
```{r}
meanDifferenceBetweenGenders = function(d){
# difference in means between review types
# for males
# (change from single to double)
diffMales = diff(rev(tapply(d[d$gender=="M",]$Score.mean,
d[d$gender=="M",]$review,
mean)))
# for females
diffFemales = diff(rev(tapply(d[d$gender=="F",]$Score.mean,
d[d$gender=="F",]$review,
mean)))
# difference in differences
# value > 0 means female scores increase
# more under double-blind review than male scores
return(diffFemales-diffMales)
}
perm = function(d){
d$review = sample(d$review)
meanDifferenceBetweenGenders(d)
}
perm.test = function(d,title){
n = 10000
trueDiff = meanDifferenceBetweenGenders(d)
permDiff = replicate(n, perm(d))
p = sum(permDiff>trueDiff) / n
z = (trueDiff-mean(permDiff)) / sd(permDiff)
print(paste("p=",p,", z=",z))
hist(permDiff,xlab="Female advantage in double-blind",main=title)
abline(v=trueDiff,col=2)
}
```
Permutation test for all data:
```{r}
perm.test(allData,
"All conferences")
```
Permutation test without E11 data:
```{r}
perm.test(allData[allData$conference!="E11",],
"Without E11")
readScores = read.csv("../data/EvoLang_ReadingScores_E8_to_E12.csv",stringsAsFactors = F)
readScores$fleschkincaid_score_scaled = scale(readScores$fleschkincaid_score)
readScores$dalechall_score_scaled = scale(readScores$dalechall_score)
readScores$student[is.na(readScores$student)] = "Non-Student"
readScores$student[readScores$student=="EC"] = "Non-Student"
readScores$student[readScores$student=="Faculty"] = "Non-Student"
# Remove an outlier
readScores = readScores[readScores$fleschkincaid_score_scaled<6,]
readScores$gender = factor(readScores$gender)
readScores$conference = factor(readScores$conference,
levels = c("E8","E9","E10","E11","E12"))
pp = preProcess(readScores[,c('fleschkincaid_score',"dalechall_score")], method="BoxCox")
lambda.fk = pp$bc$fleschkincaid_score$lambda
lambda.dc = pp$bc$dalechall_score$lambda
readScores$fleschkincaid_score_norm =  bcPower(readScores$fleschkincaid_score, lambda = lambda.fk)
readScores$dalechall_score_norm = bcPower(readScores$dalechall_score, lambda = lambda.dc)
??preProcess
?preProcess
library(caret)
?preProcess
library(caret)
readScores = read.csv("../data/EvoLang_ReadingScores_E8_to_E12.csv",stringsAsFactors = F)
readScores$fleschkincaid_score_scaled = scale(readScores$fleschkincaid_score)
readScores$dalechall_score_scaled = scale(readScores$dalechall_score)
readScores$student[is.na(readScores$student)] = "Non-Student"
readScores$student[readScores$student=="EC"] = "Non-Student"
readScores$student[readScores$student=="Faculty"] = "Non-Student"
# Remove an outlier
readScores = readScores[readScores$fleschkincaid_score_scaled<6,]
readScores$gender = factor(readScores$gender)
readScores$conference = factor(readScores$conference,
levels = c("E8","E9","E10","E11","E12"))
pp = preProcess(readScores[,c('fleschkincaid_score',"dalechall_score")], method="BoxCox")
lambda.fk = pp$bc$fleschkincaid_score$lambda
lambda.dc = pp$bc$dalechall_score$lambda
readScores$fleschkincaid_score_norm =  bcPower(readScores$fleschkincaid_score, lambda = lambda.fk)
readScores$dalechall_score_norm = bcPower(readScores$dalechall_score, lambda = lambda.dc)
?bcPower
??bcPower
library(car)
readScores = read.csv("../data/EvoLang_ReadingScores_E8_to_E12.csv",stringsAsFactors = F)
readScores$fleschkincaid_score_scaled = scale(readScores$fleschkincaid_score)
readScores$dalechall_score_scaled = scale(readScores$dalechall_score)
readScores$student[is.na(readScores$student)] = "Non-Student"
readScores$student[readScores$student=="EC"] = "Non-Student"
readScores$student[readScores$student=="Faculty"] = "Non-Student"
# Remove an outlier
readScores = readScores[readScores$fleschkincaid_score_scaled<6,]
readScores$gender = factor(readScores$gender)
readScores$conference = factor(readScores$conference,
levels = c("E8","E9","E10","E11","E12"))
pp = preProcess(readScores[,c('fleschkincaid_score',"dalechall_score")], method="BoxCox")
lambda.fk = pp$bc$fleschkincaid_score$lambda
lambda.dc = pp$bc$dalechall_score$lambda
readScores$fleschkincaid_score_norm =  bcPower(readScores$fleschkincaid_score, lambda = lambda.fk)
readScores$dalechall_score_norm = bcPower(readScores$dalechall_score, lambda = lambda.dc)
round(cor(readScores[,c("flesch_score","fleschkincaid_score", "gunningfog_score" ,"smog_score","dalechall_score")]),2)
round(cor(readScores[,c("flesch_score","fleschkincaid_score", "gunningfog_score" ,"smog_score","dalechall_score")]),2)
ggplot(readScores, aes(y=fleschkincaid_score,x=conference,colour=gender)) + geom_boxplot()
ggplot(readScores, aes(y=fleschkincaid_score,x=gender,colour=conference)) + geom_boxplot()
ggplot(readScores, aes(y=fleschkincaid_score,x=conference,colour=format)) + geom_boxplot()
ggplot(readScores, aes(y=fleschkincaid_score,x=conference,colour=student)) + geom_boxplot()
ggplot(readScores[readScores$student!="Student",], aes(y=dalechall_score,x=conference,colour=gender))+ geom_boxplot(varwidth = 0.5)
ggplot(readScores, aes(y=dalechall_score,x=gender,colour=conference)) + geom_boxplot()
ggplot(readScores, aes(y=fleschkincaid_score,x=gender,colour=conference)) + geom_boxplot()
ggplot(readScores, aes(y=dalechall_score,x=paste(student,gender),colour=conference))+ geom_boxplot(varwidth = 0.5)
ggplot(readScores, aes(y=fleschkincaid_score,x=paste(student,gender),colour=conference))+ geom_boxplot(varwidth = 0.5)
x = readScores %>% group_by(conference,gender,student) %>%
summarise(dalechall_score=mean(dalechall_score),
fleschkincaid_score=mean(fleschkincaid_score))
ggplot(x,aes(x=(conference),y=dalechall_score,group=paste(gender,student),colour=paste(gender,student))) + geom_line() + geom_point()
ggplot(x,aes(x=(conference),y=fleschkincaid_score,group=paste(gender,student),colour=paste(gender,student))) + geom_line() + geom_point()
library(dplyr)
x = readScores %>% group_by(conference,gender,student) %>%
summarise(dalechall_score=mean(dalechall_score),
fleschkincaid_score=mean(fleschkincaid_score))
ggplot(x,aes(x=(conference),y=dalechall_score,group=paste(gender,student),colour=paste(gender,student))) + geom_line() + geom_point()
ggplot(x,aes(x=(conference),y=fleschkincaid_score,group=paste(gender,student),colour=paste(gender,student))) + geom_line() + geom_point()
summary(aov(dalechall_score_norm~
conference*student*gender,
data = readScores[readScores$conference %in% c("E11","E12"),]))
summary(aov(fleschkincaid_score_norm~
conference*student*gender,
data = readScores[readScores$conference %in% c("E11","E12"),]))
summary(aov(dalechall_score_norm~
format*conference*student*gender,
data = readScores[readScores$conference %in% c("E11","E12"),]))
sdx = 1.96 * sd(readScores$dalechall_score_norm)
mx = mean(readScores$dalechall_score_norm)
readScoresDC = readScores[
readScores$dalechall_score_norm < (mx +sdx) &
readScores$dalechall_score_norm > (mx -sdx)
,]
readScoresDC$dalechall_score_norm = scale(readScoresDC$dalechall_score_norm)
m0 = lmer(dalechall_score_norm~ 1 +
(1 | conference),
contrasts=list(
gender=contr.sum(2)/2
),
data = readScoresDC)
mFrm = update(m0,~.+format, control = lmerControl(optimizer = "bobyqa"))
mStu = update(mFrm,~.+student)
mGen = update(mFrm,~.+gender)
mTime = update(mGen,~.+I(as.numeric(conference)-3))
mGenTime = update(mTime,~.+gender*I(as.numeric(conference)-3))
anova(m0,mFrm,mGen,mTime,mGenTime)
summary(mGenTime)
ggplot(x,aes(x=(conference),y=dalechall_score,group=paste(gender,student),colour=paste(gender,student))) + geom_line() + geom_point()
summary(aov(dalechall_score_norm~
format*conference*student*gender,
data = readScores[readScores$conference %in% c("E11","E12"),]))
table(readScores$student)
summary(aov(dalechall_score_norm~
format*conference*student*gender,
data = readScores[readScores$conference %in% c("E11","E12") & readScores$student=="Non-Student",]))
summary(aov(dalechall_score_norm~
format*conference*gender,
data = readScores[readScores$conference %in% c("E11","E12") & readScores$student=="Non-Student",]))
summary(aov(dalechall_score_norm~
conference*gender,
data = readScores[readScores$conference %in% c("E11","E12") & readScores$student=="Non-Student",]))
m0 = lmer(fleschkincaid_score_scaled~ 1 +
(1+gender+format| conference),
contrasts=list(
gender=contr.sum(2)/2
),
data = readScores,
control = lmerControl(optimizer = "Nelder_Mead"))
mFrm = update(m0,~.+format)
mStu = update(mFrm,~.+student,
control = lmerControl(optimizer = "bobyqa"))
mGen = update(mStu,~.+gender)
mTime = update(mGen,~.+I(as.numeric(conference)-3))
anova(m0,mFrm,mStu,mGen,mTime)
summary(mTime)
m0 = lmer(fleschkincaid_score_scaled~ 1 +
(1| conference),
contrasts=list(
gender=contr.sum(2)/2
),
data = readScores,
control = lmerControl(optimizer = "Nelder_Mead"))
mFrm = update(m0,~.+format)
mStu = update(mFrm,~.+student,
control = lmerControl(optimizer = "bobyqa"))
mGen = update(mStu,~.+gender)
mTime = update(mGen,~.+I(as.numeric(conference)-3))
anova(m0,mFrm,mStu,mGen,mTime)
summary(mTime)
summary(aov(dalechall_score_norm~
format*conference*student*gender,
data = readScores[readScores$conference %in% c("E11","E12"),]))
# Convert causal links to dot language
library(igraph)
try(setwd("~/Documents/Bristol/CHIELD/CHIELD_Online/analysis/"))
dotEdgeTypes = c(">"= 'arrowhead="normal",arrowtail="none"',
"<=>"= 'arrowhead="normal",arrowtail="normal"',
"<"= 'arrowhead="none",arrowtail="normal"',
"~"= 'arrowhead="none",arrowtail="none",style="dashed",color="#b3b6b7"',
"/>"='arrowhead="tee",arrowtail="none"',
">>"='arrowhead="normal",arrowtail="none",color="Red"',
"~="='arrowhead="dot",arrowtail="none"',
"^"='arrowhead="normal",arrowtail="none",style="dashed",color="Green"'
)
causalLinksToDOT = function(d){
varLabels = unique(c(d$Var1.label,d$Var2.label))
varIds = v[match(varLabels,v$name),]$pk
nodesDot = paste("V",varIds,' [label="',varLabels,'"]', sep='')
edgesProperties = dotEdgeTypes[d$Relation]
edgesDot = paste(
"V",d$Var1,
" -> ",
"V",d$Var2,
" [",edgesProperties,"] ",
sep=""
)
dot = paste0("digraph chield {\n",
'node [color="#e92b2b", style=filled, fillcolor="#ffd2d2"]\n\n',
paste(nodesDot,collapse = "\n"),
"\n",
paste(edgesDot, collapse = "\n"),
"\n}"
)
return(dot)
}
d = read.csv("../app/data/db/CausalLinks.csv",stringsAsFactors = F)
v = read.csv("../app/data/db/Variables.csv",stringsAsFactors = F)
d$Var1.label = v[match(d$Var1,v$pk),]$name
d$Var2.label = v[match(d$Var2,v$pk),]$name
for(doc in unique(d$bibref)){
docDot = causalLinksToDOT(d[d$bibref==doc,])
filename = paste0("../../Graphs/dot/",doc,".dot")
cat(docDot,file=filename)
}
allLinksDot = causalLinksToDOT(d)
dim(d)
d = read.csv("~/Desktop/costs.csv")
tapply(d$costs,d$month,sum)
tapply(d$costs,d$month,sum,na.rm=T)
cx = tapply(d$costs,d$month,sum,na.rm=T)
plot(cx)
mean(cx)
hist(d$costs)
d = read.csv("~/Desktop/costs2.csv")
cx = tapply(d$costs,d$month,sum,na.rm=T)
plot(cx)
mean(cx)
cp = tapply(d$costs[d$costs>0],d$month[d$costs>0],sum,na.rm=T)
plot(cp)
mean(cp)
d = read.csv("~/Desktop/midata8613-2b.csv")
d = read.table("~/Desktop/midata.tsv")
d = read.table("~/Desktop/midata.tsv")
d = read.table("~/Desktop/midata.tsv",sep="\t")
head(d)
d = read.table("~/Desktop/midata.tsv",sep="\t", header = T)
tapply(d$Debit.Credit,d$Merchant.Description,sum)
d = read.table("~/Desktop/midata.tsv",sep="\t", header = T)
tapply(as.numeric(d$Debit.Credit),d$Merchant.Description,sum)
sx = tapply(as.numeric(d$Debit.Credit),d$Merchant.Description,sum)
sort(sx)
head(sx)
head(sort(sx))
head(sort(sx),n=10)
head(sort(sx),n=20)
d[grepl("paypal",d$Merchant.Description,ignore.case = T),]
d[grepl("paypal",d$Merchant.Description,ignore.case = T),]$Merchant.Description
d = read.table("~/Desktop/midata.tsv",sep="\t", header = T,stringsAsFactors = F)
d[grepl("paypal",d$Merchant.Description,ignore.case = T),]$Merchant.Description
d = read.csv("~/Desktop/midata8613-2b.csv",stringsAsFactors = F)
head(d)
sx = tapply(as.numeric(d$Debit.Credit),d$Merchant.Description,sum)
sx
sort(sx)
head(sort(sx))
d[grepl("paypal",d$Merchant.Description,ignore.case = T),]
head(sort(sx))
head(sort(sx),n=20)
head(sort(sx),n=30)
sort(d$Merchant.Description)
sort(unique(d$Merchant.Description))
sx["CHAI STREET LTD   CARDIFF"]
sx["EDINBURGH TRAMS LIEDINBURGH"]
sx["VUE BSL LTD       CARDIFF"]
sort(sx)
dim(readScores)
table(readScores$conference,readScores$gender)
head(readScores)
table(allData$FirstAuthorGender,allData$conference,allData$student)
gtable = table(allData$FirstAuthorGender,allData$conference,allData$student)
gtable[,,1]
t(gtable[,,1])
cbind(t(gtable[,,1]),t(gtable[,,2]))
write.csv(cbind(t(gtable[,,1]),t(gtable[,,2])),
"../results/CountTable.csv")
getwd()
setwd("~/Documents/Conferences/Evolang12/genderBias2018_public/analysis/")
---
title: "The impact of double blind reviewing at EvoLang 12: statistics"
output: pdf_document
---
```{r echo=F, eval=F}
setwd("~/Documents/Conferences/Evolang12/genderBias2018_public/analysis/")
```
# Introduction
# Data
This script uses the data file `EvoLang_Scores_9_to_12.csv`:
-  conference:  Which conference the paper was submitted to
-  gender: Gender of first author
-  Score.Mean:  Mean raw score given by reviewers (scaled between 0 and 1, higher = better paper)
-  student: The student status of the first author at submission.
All variables with an underscore are measures of readability.  Below we calculate a variable `review`, which represents the type of review (Single / Double blind).
# Loading data for first analysis
Load libraries.
```{r warning=F, message=F}
# Load data
library(lattice)
library(ggplot2)
library(gplots)
library(lme4)
library(car)
library(caret)
library(dplyr)
```
```{r}
# read data
allData = read.csv("../data/EvoLang_ReadingScores_E8_to_E12.csv",stringsAsFactors = F)
# relabel factor
allData$FirstAuthorGender = factor(allData$gender,labels=c("F","M"))
allData$review = factor(c("Single","Double")[(allData$conference %in% c("E11","E12"))+1])
allData$conference = factor(allData$conference,levels = c("E8","E9","E10","E11","E12"))
allData$student[is.na(allData$student)] = "Non-Student"
allData$student[allData$student=="Faculty"] = "Non-Student"
allData$student[allData$student=="EC"] = "Non-Student"
allData$student = factor(allData$student)
#allData$Score.mean = scale(allData$Score.mean)
for(conf in levels(allData$conference)){
allData$Score.mean[allData$conference==conf] = scale(allData$Score.mean[allData$conference==conf])
}
allData = allData[!is.na(allData$FirstAuthorGender),]
allData = allData[!is.na(allData$student),]
```
Look at the distribution of submissions:
```{r}
table(allData$gender,allData$conference)
prop.table(table(allData$gender,allData$conference),2)
gtable = table(allData$FirstAuthorGender,allData$conference,allData$student)
write.csv(cbind(t(gtable[,,1]),t(gtable[,,2])),
"../results/CountTable.csv")
gtable
readScores$fleschkincaid_score_scaled = scale(readScores$fleschkincaid_score)
readScores$dalechall_score_scaled = scale(readScores$dalechall_score)
readScores$student[is.na(readScores$student)] = "Non-Student"
readScores$student[readScores$student=="EC"] = "Non-Student"
readScores$student[readScores$student=="Faculty"] = "Non-Student"
# Remove an outlier
readScores = readScores[readScores$fleschkincaid_score_scaled<6,]
readScores$gender = factor(readScores$gender)
readScores$conference = factor(readScores$conference,
levels = c("E8","E9","E10","E11","E12"))
head(readScores)
dim(readScores)
table(readScores$conference,readScores$gender)
readScores = read.csv("../data/EvoLang_ReadingScores_E8_to_E12.csv",stringsAsFactors = F)
gtable2 = table(allData$FirstAuthorGender,allData$conference,allData$student)
write.csv(cbind(t(gtable2[,,1]),t(gtable2[,,2])),
"../results/CountTable_Readability.csv")
gtable2
dim(readScores)
dim(d)
dim(allData)
mean(readScores$fleschkincaid_score)
mean(readScores$dalechall_score)
round(cor(readScores[,c("flesch_score","fleschkincaid_score",
"gunningfog_score" ,"smog_score","dalechall_score"
)]),2)
summary(aov(fleschkincaid_score_norm~
format*conference*student*gender,
data = readScores[readScores$conference %in% c("E11","E12"),]))
0.2 - 0.01
# RepPart - Lang 2, Match 10th 11am, Chain 2
#           Lang 4, Chain 2 March 8th 11am
setwd("~/Documents/MPI/Thom/LEX_2016/ChooseStartingLanguages/analysis/")
source('utils.R')
filebase= "../data/Phase1/experiments/"
startingLanguages.files = c("Start_1.lang","Start_2.lang","Start_3.lang","Start_4.lang")
startingLanguages = list()
startingLanguages.S = list()
startingLanguages.E = list()
for(f in startingLanguages.files){
lang = loadLanguage(paste(filebase,f,sep=''))
startingLanguages.E[[f]] = getExpressivity(lang)
startingLanguages.S[[f]] = getSystematicity(lang)
startingLanguages[[f]] = lang
}
filebase= "../data/Phase1/results/"
files = list.files(filebase)#,pattern = "*\\.lang")
files = files[!grepl("^Start",files)]
d = data.frame(startLang.name = NA, endLang.name=NA,startLang=NA,endLang=NA,E=NA,S=NA,L=NA)
for(f in files){
lx = loadLanguageFromResults(paste(filebase,f,sep=''))
if(lx[[3]]==16){
lang = lx[[1]]
startLang.name = lx[[2]]
#lang = loadLanguage(paste(filebase,f,sep=''))
end.E = getExpressivity(lang)
end.S = getSystematicity(lang)
#startLang.name = strsplit(f,'-')[[1]][2]
startLang = startingLanguages[startLang.name][[1]][1]
end.L = 1 - compare2Langs(startLang,lang)
d = rbind(d,c(startLang.name,f, startLang, lang, end.E, end.S, end.L))
}
}
d = d[-1,]
for(i in 5:7){
d[,i] = as.numeric(d[,i])
}
d$start.E = unlist(startingLanguages.E[d$startLang.name])
d$start.S = unlist(startingLanguages.S[d$startLang.name])
d = d[!d$endLang.name %in% c('PH1_3_10_095345_CH1_parent-Start_1'),]#,'PH1_3_10_102825_CH1_parent-Start_1.lang'),]
plot(d$S,d$L, ylim=c(0,1),xlim=c(0,1), col=as.numeric(as.factor(d$startLang.name)),pch=16)
abline(v=startingLanguages.S, col=1:4)
summary(lm(L ~ start.S, data=d))
summary(lm(start.S~L+E, data=d))
plot(d$start.S,d$L, ylim=c(0,1),xlim=c(0,1), col=as.numeric(as.factor(d$startLang.name)),pch=16)
plot(d$L,d$E, ylim=c(0,1),xlim=c(0,1), col=as.numeric(as.factor(d$startLang.name)),pch=16)
abline(h=unlist(startingLanguages.E),col=rgb(0,0,0,0.3))
tapply(d$L,d$startLang.name,sd)
tapply(d$E,d$startLang.name,sd)
summary(lm(L ~ start.S, data=d))
plot(d$start.S,d$L, ylim=c(0,1),xlim=c(0,1), col=as.numeric(as.factor(d$startLang.name)),pch=16)
plot(d$L,d$E, ylim=c(0,1),xlim=c(0,1), col=as.numeric(as.factor(d$startLang.name)),pch=16)
tapply(d$L,d$startLang.name,sd)
tapply(d$E,d$startLang.name,sd)
plot(1:4,1:4,col=1:4)
tapply(d$L,d$startLang.name,mean)
tapply(d$L,d$startLang.name,mean) - mean(d$L)
mean(d$L)
tapply(d$L,d$startLang.name,function(X){X-mean(d$L)})
tapply(d$L,d$startLang.name,function(X){sum(abs(X-mean(d$L)))})
tapply(d$E,d$startLang.name,sd)
tapply(d$L,d$startLang.name,sd)
